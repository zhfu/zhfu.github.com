<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>zhfu's blog RSS feed</title>
    <link href="http://zhfu.github.io/atom.xml" rel="self" />
    <link href="http://zhfu.github.io" />
    <id>http://zhfu.github.io/atom.xml</id>
    <author>
        <name>zhfu</name>
        <email>fukirk@qq.com</email>
    </author>
    <updated>2014-12-28T00:00:00Z</updated>
    <entry>
    <title>基础架构必备功能与组件</title>
    <link href="http://zhfu.github.io/posts/2014-12-28-architectural-component.html" />
    <id>http://zhfu.github.io/posts/2014-12-28-architectural-component.html</id>
    <published>2014-12-28T00:00:00Z</published>
    <updated>2014-12-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
<header>
<h1>基础架构必备功能与组件</h1>
<p>by <em>fukirk</em> on <strong>December 28, 2014</strong></p>
<p>Tagged as: <a href="http://zhfu.github.io/tags/architecture.html">architecture</a>, <a href="http://zhfu.github.io/tags/midwire.html">midwire</a>.</p>
</header>

<section>
<h3 id="backend">backend:</h3>
<ul>
<li><p>WEB frameworks. For business logic.</p></li>
<li><p>Naming Service. 服务与机器列表解耦，方便运维。为了管理方便，一般分部门分组分业务成树状组织。好多公司使用zoopkeeper实现，完全没必要，该功能对一致性要求很低，对可用性要求极高，好的方式使用mysql + cache实现，本机加带cache的naming agent(减少对模块的侵入，方便升级）。同时增加一些额外信息的支持，如百度BNS，单独机器与服务都可配置k-v键值对。同时防止naming service的错误引起的雪崩，如增加阈值、低于阈值不更新功能以避免误配置，如何支持单机预上线验证。</p></li>
<li><p>ACL. web模块访问后端的中间层，一般与Naming Service相关联，需要支持不同协议和格式转换，配置简洁，作为web框架扩展或单独服务（建议作为框架扩展）。参考百度的RAL。</p></li>
<li><p>DBproxy. 方便读写分离，自动化主从切换。</p></li>
<li><p>cache cluster. 缓存应该可用性高。</p></li>
<li><p>日志相关。不同语言、不同框架、不同模块日志格式要统一，切日志，日志传输，日志统计。一般用hive等进行分布式存储。</p></li>
<li><p>服务网络框架。高效、接口一致、协议简单。包含日志输出、timer、ip auth、局部存储、内部状态统计等功能。</p></li>
<li><p>二进制序列化、反序列化库。格式要向前兼容、多语言支持、效率高、使用方便、调试容易。自带IDL自动生成多语言接口。</p></li>
<li><p>ORM，可选，视业务复杂程序而定。</p></li>
</ul>
</section>
</article>
]]></summary>
</entry>
<entry>
    <title>Blog deployment system</title>
    <link href="http://zhfu.github.io/posts/2012-10-21-blog-deployment-system.html" />
    <id>http://zhfu.github.io/posts/2012-10-21-blog-deployment-system.html</id>
    <published>2012-10-21T00:00:00Z</published>
    <updated>2012-10-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
<header>
<h1>Blog deployment system</h1>
<p>by <em>Clément Delafargue</em> on <strong>October 21, 2012</strong></p>
<p>Tagged as: <a href="http://zhfu.github.io/tags/misc.html">misc</a>.</p>
</header>

<section>
<p>I’ve spent some time to have an automatic deployment system for this blog. I’ll explain briefly how it works.</p>
<h2 id="bricks">Bricks</h2>
<p>This blog is statically generated with Hakyll. The generated files are placed in <code>_site</code> (which is <code>.gitignore</code>’d).</p>
<p>The hosting platform is <a href="http://clever-cloud.com">Clever Cloud</a> which offers git deployment.</p>
<p>Since the generated are not versioned, I can’t directly push it. For that, I need to create a new empty, orphan branch :</p>
<pre><code>git checkout --orphan publish</code></pre>
<p>This branch will now hold the generated files.</p>
<p>So every time I publish something, I have to :</p>
<ul>
<li>generate a clean site</li>
<li>checkout to <code>publish</code></li>
<li>remove the source files and copy the generated files</li>
<li>commit</li>
<li>push</li>
<li>get back to <code>master</code> and clean up the mess</li>
</ul>
<p>Plus a few extra (save the current state to a stash during the deployment, for instance).</p>
<p>All of which conveniently wrapped in a <code>make publish</code>. Feel free to read and comment the source code (which is quite dirty, I know). <a href="https://github.com/divarvel/blog/blob/master/Makefile">Makefile</a></p>
<p>There are a few ToDos left, such as tagging and signing every publication.</p>
</section>
</article>
]]></summary>
</entry>

</feed>
