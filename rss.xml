<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>zhfu's blog RSS feed</title>
        <link>http://zhfu.github.io</link>
        <description><![CDATA[blog]]></description>
        <atom:link href="http://zhfu.github.io/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Mon, 12 Jan 2015 00:00:00 UT</lastBuildDate>
        <item>
    <title>序列化与反序列化</title>
    <link>http://zhfu.github.io/posts/2015-01-12-serialize-and-unserialize.html</link>
    <description><![CDATA[<article>
<header>
<h1>序列化与反序列化</h1>
<p>by <em>fukirk</em> on <strong>January 12, 2015</strong></p>
<p>Tagged as: <a href="http://zhfu.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96.html">序列化</a>, <a href="http://zhfu.github.io/tags/protobuf.html">protobuf</a>.</p>
</header>

<section>
<h3 id="写protobuf前先来道面试题-_--transform-a-tree-from-computer-a-to-computer-b">写protobuf前先来道面试题-_- transform A tree from computer A to computer B?</h3>
<p>A机器与B机器之间内存无法互相访问，必然需要序列化与反序列化，树要序列化必然要进行遍历，有DFS、BFS两种遍历方式，DFS大家熟知的序列化格式有xml、json或类似的方式。这里讲种BFS遍历方式，反序列化即构建树的层次结构，树本身是递归定义的，而DFS过程本身也是递归定义的，所以两者结合比较简单，对于BFS来说我们有什么，层次信息，即可以知道一层结点和下一层结点，而结点和它的子结点也构成层次关系，那么怎么利用层次关系进行反序列化？</p>
<p>如果从一棵树取出两层，可以将第一层看作一堆孤立根结点，第二层是这些根结点的子结点的按顺序排列，那么只要在第二层结点中加入一些标记，将同一父节点的节点划分到一块，即将第二层分段就可以序列化反序列化父子关系。所以BFS方式的序列化反序列化其实很简单。</p>
<p>代码</p>
<p>struct Node{ string data; vector<Node *> child; };</p>
<p>string serialize(Node <em>root) { queue<Node *> q; if(root == NULL) return string(); q.push(root); char tag = ‘x’; string ret = tag + serialize(root-&gt;data) + tag; while(!q.empty()) { Node </em>cur = que.front(); que.pop(); ret += tag; for(size_t i = 0; i &lt; cur-&gt;child.size(); ++i) { ret += serialize(cur-&gt;child[i]); que.push(cur-&gt;child[i]); } ret += tag; } return ret; }</p>
<p>Node* unserialize(string input) { if(input.empty()) return NULL; queue<Node*> q; Node* root; for(size_t i = 0; i &lt; input.size(); /<em>empty on purpose</em>/) { Node <em>tmp = NULL; if(!q.empty()) { tmp = q.front(); q.pop(); } if(str[i] == tag) { i += 1; while(str[i] != tag) { int len; string str = unserialize(input, i + 1, len); Node </em>node = new Node(str); if(tmp) tmp-&gt;child.push_back(node); else root = node; q.push(node); } i += 1; } } return root; }</p>
</section>
</article>
]]></description>
    <pubDate>Mon, 12 Jan 2015 00:00:00 UT</pubDate>
    <guid>http://zhfu.github.io/posts/2015-01-12-serialize-and-unserialize.html</guid>
</item>
<item>
    <title>Netty Learn</title>
    <link>http://zhfu.github.io/posts/2015-01-08-netty-learn.html</link>
    <description><![CDATA[<article>
<header>
<h1>Netty Learn</h1>
<p>by <em>fukirk</em> on <strong>January  8, 2015</strong></p>
<p>Tagged as: <a href="http://zhfu.github.io/tags/java.html">java</a>, <a href="http://zhfu.github.io/tags/netty.html">netty</a>, <a href="http://zhfu.github.io/tags/network.html">network</a>.</p>
</header>

<section>
<h3 id="初试">初试</h3>
<p>参照netty的<a href="http://netty.io/wiki/user-guide-for-4.x.html">User Guide</a>编写runnable程序。</p>
<p>必须理解概念ServerHandler、ChannelFuture、EventLoopGroup.</p>
<p>几个阶段channelRead、channelActive、handlerAdded、handlerRemoved、Encoder、Decoder。</p>
<p>例子中抽象POJO(Plain Old Java Object)相比ByteBuf的好处</p>
<h3 id="serverbootstrapbootsrap">ServerBootstrap、Bootsrap</h3>
<h3 id="java-nio">java NIO</h3>
<p>感觉是在select和非阻塞socket(也就是调用IO函数直接返回，不等待)上的各种概念封装。</p>
</section>
</article>
]]></description>
    <pubDate>Thu, 08 Jan 2015 00:00:00 UT</pubDate>
    <guid>http://zhfu.github.io/posts/2015-01-08-netty-learn.html</guid>
</item>
<item>
    <title>maven和sbt使用</title>
    <link>http://zhfu.github.io/posts/2015-01-08-maven.html</link>
    <description><![CDATA[<article>
<header>
<h1>maven和sbt使用</h1>
<p>by <em>fukirk</em> on <strong>January  8, 2015</strong></p>
<p>Tagged as: <a href="http://zhfu.github.io/tags/java.html">java</a>, <a href="http://zhfu.github.io/tags/maven.html">maven</a>.</p>
</header>

<section>
<p>计划去杭州，虽然之前用过java但忘光了，开始补java及深入研究，^_^。在学校也看过大半年scala，之后用不着就扔了，现在也捡起来吧，kafka和spark这么火，看看代码学习。</p>
<h3 id="maven">maven</h3>
<h4 id="安装">安装</h4>
<p>到官网下载<a href="http://maven.apache.org/">Maven</a>, 将bin加入$PATH后即可,maven配置文件在conf目录下。</p>
<h4 id="使用">使用</h4>
<p><code>mvn archetype:create -DgroupId=com.kirk.hi -DartifactId=hi -DpackageName=com.kirk.hi -Dversion=1.0</code></p>
<p>创建hi(artifactId)目录，及目录下的pom.xml，在其中自动添加了junit依赖。src下自动生成hello world。</p>
<h5 id="构建">构建</h5>
<p><code>mvn package</code> 结果在target目录下，运行<code>java -cp target/hi-1.0.jar com.kirk.hi.App</code></p>
<h5 id="intellij">intellij</h5>
<p>create project-&gt;右键Add Framework Support-&gt;maven，自动生成pom.xml</p>
<p>把netty依赖写入pom.xml后，参考netty的user guide写个简单例子学习netty</p>
<h3 id="sbt">sbt</h3>
</section>
</article>
]]></description>
    <pubDate>Thu, 08 Jan 2015 00:00:00 UT</pubDate>
    <guid>http://zhfu.github.io/posts/2015-01-08-maven.html</guid>
</item>
<item>
    <title>nanomsg代码阅读-简单例子</title>
    <link>http://zhfu.github.io/posts/2015-01-06-nanomsg.html</link>
    <description><![CDATA[<article>
<header>
<h1>nanomsg代码阅读-简单例子</h1>
<p>by <em>fukirk</em> on <strong>January  6, 2015</strong></p>
<p>Tagged as: <a href="http://zhfu.github.io/tags/nanomsg.html">nanomsg</a>, <a href="http://zhfu.github.io/tags/net.html">net</a>, <a href="http://zhfu.github.io/tags/code.html">code</a>.</p>
</header>

<section>
<h4 id="阅读开源代码方法">阅读开源代码方法</h4>
<p>如果是lib库，先写个简单例子，弄清楚整体流程之后，把附加功能添加进去，流程足够清晰后把无法添加的功能代码搞明白。</p>
<p>如果是可单独运行的，直接使用最小配置运行，大概弄清楚之后，逐步添加配置项看代码，直至完全弄明白。</p>
<p>例子参见(这篇blog)[http://tim.dysinger.net/posts/2013-09-16-getting-started-with-nanomsg.html]。</p>
<h4 id="关键概念">关键概念</h4>
<pre><code>aio目录里的nn_ctx、nn_fsm、nn_pool</code></pre>
<h4 id="运行过程栈">运行过程栈</h4>
<h5 id="pull端">pull端</h5>
<pre><code>nn_socket创建socket句柄。
	nn_global_create_socket。self为nn_global类型单例全局状态变量。
                  nn_alloc、nn_sock_init创建socket</code></pre>
</section>
</article>
]]></description>
    <pubDate>Tue, 06 Jan 2015 00:00:00 UT</pubDate>
    <guid>http://zhfu.github.io/posts/2015-01-06-nanomsg.html</guid>
</item>
<item>
    <title>[转]当你下班时，你需要忙些什么?</title>
    <link>http://zhfu.github.io/posts/2014-12-28-self-improvement.html</link>
    <description><![CDATA[<article>
<header>
<h1>[转]当你下班时，你需要忙些什么?</h1>
<p>by <em>fukirk</em> on <strong>December 28, 2014</strong></p>
<p>Tagged as: <a href="http://zhfu.github.io/tags/improve.html">improve</a>, <a href="http://zhfu.github.io/tags/ability.html">ability</a>.</p>
</header>

<section>
<p><a href="http://thing.douban.com/subject/96/?on=469297640">来源</a> 关于学会如何自我提升：</p>
<h4 id="自我提升的前提">1.自我提升的前提。</h4>
<pre><code>龙应台在《有些事，只能一个人做》中写到：“奔忙，使作家无法写作，使音乐家无法谱曲，使画家无法作画，使学者无法著述；奔忙，使思想家变成名嘴，使名嘴变成娱乐家，使娱乐家变成聒噪小丑。闲暇、逗留，确实是创造力的有机土壤，不可或缺。”

挤出大块的时间，这是自我提升的大前提。有效的时间管理是自我提升根本。</code></pre>
<p>那么，下面的内容均建立在你至少在每天能有1-3小时自由支配的大块时间。</p>
<h4 id="自我提升哪些方面">2.自我提升哪些方面？</h4>
<p>身体素质：健康的身体是奋斗的前提，职场人真心病不起，大家都懂。</p>
<p>专业技能：各专业的情况不一样，专业能力是核心竞争力。</p>
<p>阅读能力：提高提炼有效信息的速度，根据自身的需要，每年对有兴趣的2-3个领域进行主题阅读。</p>
<p>写作： 能妥善的将自己的想法用文字表达出来。</p>
<p>学习能力：面对陌生的领域，能有条理按部就班的用1年左右的时间进行学习。</p>
<p>时间管理：提高对时间的敏感性与对自身计划安排的掌控能力。</p>
<p>独立思考：培养批判性思维，看待问题不受权威而左右思维的独立性，拥有自己的思维战略。</p>
<p>知识管理：能将大量相关资料整理成知识框架，并与他人分享。</p>
<p>人际沟通：成为一个有趣的人，多认识不同的人，了解自己的长处与弱点。</p>
<p>演讲演示：能在关键场合讲自己想表达的内容表达清楚，达到预期效果。</p>
<p>谈判能力：掌握谈判技巧，达到谈判预期目的。</p>
<p>项目统筹：在现有的资源下通过委任和监督完成中小型项目。</p>
<h4 id="如何提高这些方面">3.如何提高这些方面？</h4>
<pre><code>锁定领域，寻找该领域5-8本最经典的书进行阅读，建立理论基础。至少半年以上的实践时间并不断根据自身情况改善。将自己的经验通过各种形式整理成资料，分享给他人。

提高这些方面并不是一朝一夕的事情，但这12个方面的提高的方法是一致的。 需求时间：粗略估计，入门半年到一年、中等三到五年、专家六年到九年甚至更多。</code></pre>
<p>4.怎么检测对知识和技能的掌握程度？</p>
<ul>
<li><p>“了解”指知道得清楚。 如刚刚获取驾照。 如英语刚过四六级。</p></li>
<li><p>“掌握”指熟知并能运用。 如开车在固定路线上下班。 如能跟外国人流畅的用英语聊天。</p></li>
<li><p>“熟练”指熟知并运用得顺手。 如独自长途到陌生的城市。 如到全英环境的国家生活一段时间并适应。</p></li>
<li><p>“精通” 指透彻理解，运用自如，并能融会贯通。 如电影里面男主角的各种飚车神技。 如优秀译者，同传，高端大气上等次。</p></li>
</ul>
</section>
</article>
]]></description>
    <pubDate>Sun, 28 Dec 2014 00:00:00 UT</pubDate>
    <guid>http://zhfu.github.io/posts/2014-12-28-self-improvement.html</guid>
</item>
<item>
    <title>基础架构必备功能与组件</title>
    <link>http://zhfu.github.io/posts/2014-12-28-architectural-component.html</link>
    <description><![CDATA[<article>
<header>
<h1>基础架构必备功能与组件</h1>
<p>by <em>fukirk</em> on <strong>December 28, 2014</strong></p>
<p>Tagged as: <a href="http://zhfu.github.io/tags/architecture.html">architecture</a>, <a href="http://zhfu.github.io/tags/midwire.html">midwire</a>.</p>
</header>

<section>
<h3 id="backend">backend:</h3>
<ul>
<li><p>WEB frameworks. For business logic.</p></li>
<li><p>Naming Service. 服务与机器列表解耦，方便运维。为了管理方便，一般分部门分组分业务成树状组织。好多公司使用zoopkeeper实现，完全没必要，该功能对一致性要求很低，对可用性要求极高，好的方式使用mysql + cache实现，本机加带cache的naming agent(减少对模块的侵入，方便升级）。同时增加一些额外信息的支持，如百度BNS，单独机器与服务都可配置k-v键值对。同时防止naming service的错误引起的雪崩，如增加阈值、低于阈值不更新功能以避免误配置，如何支持单机预上线验证。</p></li>
</ul>
<p>开源项目参考Netflix的(eureka)[https://github.com/Netflix/eureka/)</p>
<p>相关文章</p>
<p>使用zookeeper作naming service的坏处 http://www.infoq.com/cn/news/2014/12/zookeeper-service-finding</p>
<ul>
<li><p>ACL. web模块访问后端的中间层，一般与Naming Service相关联，需要支持不同协议和格式转换，配置简洁，作为web框架扩展或单独服务（建议作为框架扩展）。参考百度的RAL。</p></li>
<li><p>DBproxy. 方便读写分离，自动化主从切换。</p></li>
<li><p>cache cluster. 缓存应该可用性高。</p></li>
<li><p>日志相关。不同语言、不同框架、不同模块日志格式要统一，切日志，日志传输，日志统计。一般用hive等进行分布式存储。</p></li>
<li><p>服务网络框架。高效、接口一致、协议简单。包含日志输出、timer、ip auth、局部存储、内部状态统计等功能。</p></li>
<li><p>二进制序列化、反序列化库。格式要向前兼容、多语言支持、效率高、使用方便、调试容易。自带IDL自动生成多语言接口。</p></li>
<li><p>ORM，可选，视业务复杂程序而定。</p></li>
</ul>
</section>
</article>
]]></description>
    <pubDate>Sun, 28 Dec 2014 00:00:00 UT</pubDate>
    <guid>http://zhfu.github.io/posts/2014-12-28-architectural-component.html</guid>
</item>
<item>
    <title>Blog deployment system</title>
    <link>http://zhfu.github.io/posts/2012-10-21-blog-deployment-system.html</link>
    <description><![CDATA[<article>
<header>
<h1>Blog deployment system</h1>
<p>by <em>Clément Delafargue</em> on <strong>October 21, 2012</strong></p>
<p>Tagged as: <a href="http://zhfu.github.io/tags/misc.html">misc</a>.</p>
</header>

<section>
<p>I’ve spent some time to have an automatic deployment system for this blog. I’ll explain briefly how it works.</p>
<h2 id="bricks">Bricks</h2>
<p>This blog is statically generated with Hakyll. The generated files are placed in <code>_site</code> (which is <code>.gitignore</code>’d).</p>
<p>The hosting platform is <a href="http://clever-cloud.com">Clever Cloud</a> which offers git deployment.</p>
<p>Since the generated are not versioned, I can’t directly push it. For that, I need to create a new empty, orphan branch :</p>
<pre><code>git checkout --orphan publish</code></pre>
<p>This branch will now hold the generated files.</p>
<p>So every time I publish something, I have to :</p>
<ul>
<li>generate a clean site</li>
<li>checkout to <code>publish</code></li>
<li>remove the source files and copy the generated files</li>
<li>commit</li>
<li>push</li>
<li>get back to <code>master</code> and clean up the mess</li>
</ul>
<p>Plus a few extra (save the current state to a stash during the deployment, for instance).</p>
<p>All of which conveniently wrapped in a <code>make publish</code>. Feel free to read and comment the source code (which is quite dirty, I know). <a href="https://github.com/divarvel/blog/blob/master/Makefile">Makefile</a></p>
<p>There are a few ToDos left, such as tagging and signing every publication.</p>
</section>
</article>
]]></description>
    <pubDate>Sun, 21 Oct 2012 00:00:00 UT</pubDate>
    <guid>http://zhfu.github.io/posts/2012-10-21-blog-deployment-system.html</guid>
</item>

    </channel> 
</rss>
